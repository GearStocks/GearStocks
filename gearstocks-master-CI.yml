pr:
- master

trigger: none

pool:
  vmImage: 'ubuntu-latest'

#steps:
#- script: echo Hello, world!
#  displayName: 'Run a one-line script'

#- script: |
#    echo Add other tasks to build, test, and deploy your project.
#    echo See https://aka.ms/yaml
#  displayName: 'Run a multi-line script'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
    - job: BuildFrontAndApi
      displayName: 'Build Front and API'
      steps:
      - script: |
          set -e
          echo MONGO_INITDB_ROOT_USERNAME=mongoadmin\nMONGO_INITDB_ROOT_PASSWORD=mongoadmin > database/secrets.env
          docker pull gearstocks/api_builder:latest
          docker-compose up front api_builder
          echo Front and Back successfully build.
        displayName: 'Front and API Compilation Check'
      - script: |
          set -e
          mkdir -p drop
          cp -R docker-compose.yml drop/
          cp -R .env drop/
          echo Docker Config OK
        displayName: Prepare Docker Config for Archive
      - script: |
          set -e
          rm database/secrets.env
          cp -R database drop/
          echo Database OK
        displayName: Prepare Database for Archive
      - script: |
          set -e
          mkdir -p drop/api_builder/build
          cp -R api_builder/build/App drop/api_builder/build/
          cp -R api_builder/lib drop/api_builder/
          cp -R back drop/
          echo API OK
        displayName: Prepare API for Archive
      - script: |
          set -e
          mkdir -p drop/front
          cp -R front/dist drop/front/
          cp -R apache drop/
          echo Front OK
        displayName: Prepare Front for Archive
      - script: |
          set -e
          mkdir -p drop/application
          echo Application KO
        displayName: Prepare Android App for Archive
      - script: echo Archive OK
        displayName: Archive Files
      - task: ArchiveFiles@2
        displayName: 'Archive Front and API files'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/drop'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          replaceExistingArchive: true
      - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        artifact: drop
  - stage: Deploy
    displayName: Deploy
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: GearStock
        displayName: 'Deploy Prod'
        environment:
          name: 'Gearstocks'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
              - script: |
                  set -e
                  unzip -o $(Build.ArtifactStagingDirectory)/../drop/$(Build.BuildId).zip -d /home/GearStocks/
                  cd /home/GearStocks/
                  docker-compose stop || true
                  docker-compose rm --force || true
                  docker-compose up -d --build mongo api apache