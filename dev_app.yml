# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  - dev
  include:
    - application/*

trigger: none

pool:
  vmImage: 'ubuntu-latest'

#steps:
#- script: echo Hello, world!
#  displayName: 'Run a one-line script'

#- script: |
#    echo Add other tasks to build, test, and deploy your project.
#    echo See https://aka.ms/yaml
#  displayName: 'Run a multi-line script'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
    - job: BuildApplication
      displayName: 'Build Application'
      steps:
      - script: |
          set -e
          echo "API_ADDR=dev.gearstocks.store" > .env
          echo "API_PORT=8000" >> .env
          sed -i '/- 80:80/d' docker-compose.yml
          echo "export const address = 'dev.gearstocks.store:8000';" > application/config/address.js
          docker-compose up app
          echo App successfully build.
        displayName: 'App Compilation Check'
      - script: |
          set -e
          cp -R apk drop/
          echo Application OK
        displayName: Prepare Android App for Archive
      - script: echo Archive OK
        displayName: Archive Files
      - task: ArchiveFiles@2
        displayName: 'Archive Application files'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/drop'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          replaceExistingArchive: true
      - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        artifact: drop
  - stage: Deploy
    displayName: Deploy
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: GearStockDev
        displayName: 'Deploy Application Dev'
        environment:
          name: 'Gearstocks Dev'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
              - script: |
                  set -e
                  unzip -o $(Build.ArtifactStagingDirectory)/../drop/$(Build.BuildId).zip -d /home/GearStocks/