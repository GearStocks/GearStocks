# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
- dev

trigger: none

pool:
  vmImage: 'ubuntu-latest'

#steps:
#- script: echo Hello, world!
#  displayName: 'Run a one-line script'

#- script: |
#    echo Add other tasks to build, test, and deploy your project.
#    echo See https://aka.ms/yaml
#  displayName: 'Run a multi-line script'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
    - job: BuildFrontAndApi
      displayName: 'Build Front and API'
      steps:
      - script: |
          set -e
          echo MONGO_INITDB_ROOT_USERNAME=mongoadmin\nMONGO_INITDB_ROOT_PASSWORD=mongoadmin > database/secrets.env
          docker pull gearstocks/api_builder:latest
          docker-compose up front api_builder
          echo Front and Back successfully build.
        displayName: 'Front and API Compilation Check'
  - stage: PrepareArchive
    dependsOn: Build
    condition: succeeded()
    displayName: Prepare Archive
    jobs:
      - job: docker
        displayName: Archive Docker Config
        steps:
        - script: |
            set -e
            mkdir -p drop
            cp -R docker-compose.yml drop/
            cp -R .env drop/
            echo Docker Config OK
      - job: database
        displayName: Archive Database
        steps:
        - script: |
            set -e
            rm database/secrets.env
            cp -R database drop/
            echo Database OK
      - job: api
        displayName: Archive API
        steps:
        - script: |
            set -e
            mkdir -p drop/api_builder/build
            cp -R api_builder/build/App drop/api_builder/build/
            cp -R api_builder/lib drop/api_builder/
            cp -R back drop/
            echo API OK
      - job: front
        displayName: Archive Front
        steps:
        - script: |
            set -e
            mkdir -p drop/front
            cp -R front/dist drop/front/
            cp -R apache drop/
            echo Front OK
      - job: android
        displayName: Archive Android App
        steps:
        - script: |
            set -e
            echo Application KO
            echo Archive OK
  - stage: ArchiveFiles
    dependsOn: PrepareArchive
    condition: succeeded()
    displayName: Archive Files
    jobs:
      - job: archive
        steps:
        - task: ArchiveFiles@2
          displayName: 'Archive Front and API files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/drop'
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            replaceExistingArchive: true
        - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          artifact: drop
  - stage: Deploy
    displayName: Deploy
    dependsOn: ArchiveFiles
    condition: succeeded()
    jobs:
      - deployment: GearStockDev
        displayName: 'Deploy Dev'
        environment:
          name: 'Gearstocks Dev'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
              - script: |
                  set -e
                  unzip drop/$(Build.BuildId).zip /home/GearStocks/